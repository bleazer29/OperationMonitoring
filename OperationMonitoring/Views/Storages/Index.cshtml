@{List<OperationMonitoring.Helpers.TreeViewStorage> treeViewStorages = ViewBag.TreeViewStorages;}
@{List<OperationMonitoring.Models.Stock> stocks = ViewBag.Stocks;}
@{List<OperationMonitoring.Models.Stock> selectedStocks = new List<Stock>();}
@{
    ViewData["Title"] = "Storages";
}

<div>
    @await Html.PartialAsync("_StoragesPartial");
</div>

<div class="nomenclature-table selected-nomenclature-table">
    <div class="scrollable-table" style="overflow-x:scroll;">
        <table class="table">
            <thead>
                <tr>
                   
                    <th>
                        <a href="#" data-sort="Status">
                            Status
                        </a>
                    </th>
                    <th>
                        <a href="#" data-sort="VendorCode">
                            Vendor code
                        </a>
                    </th>
                    <th>
                        <a href="#" data-sort="SerialNumber">
                            Serial number
                        </a>
                    </th>
                    <th class="sort-asc">
                        <a href="#" data-sort="Name">
                            Name
                        </a>
                    </th>
                    <th>
                        <a href="#" data-sort="Provider">
                            Provider
                        </a>
                    </th>
                    <th>
                        <a href="#" data-sort="Operationtime">
                            Operation time
                        </a>
                    </th>
                    <th>
                        <a href="#" data-sort="Amount">
                            Amount
                        </a>
                    </th>
                    <th>
                        <a href="#" data-sort="Storage">
                            Storage
                        </a>
                    </th>
                    <th>
                        @*actions*@
                    </th>
                </tr>
            </thead>

            <tbody>
                @if (selectedStocks != null)
                {
                    @foreach (var item in selectedStocks)
                    {
                        var tableClass = "";
                        if (item.Nomenclature != null)
                        {
                            <tr class="@tableClass">
                                
                                <td></td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Nomenclature.VendorCode)
                                </td>
                                <td></td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Nomenclature.Title)
                                </td>
                                <td>
                                    @if (item.Nomenclature.Provider != null)
                                    {
                                        <a asp-controller="Providers" asp-action="Details" asp-route-id="@item.Nomenclature.Provider.Id">@item.Nomenclature.Provider.Title</a>
                                    }

                                </td>
                                <td></td>
                                <td>
                                    <label class="checkBox-container" for="nom-@item.Nomenclature.Id">
                                        <input class="transferCheck" type="range" id="nom-@item.Nomenclature.Id" name="nom-@item.Nomenclature.Id" value="@item.Id">
                                        <span class="checkmark"></span>
                                    </label>
                                </td>
                                <td>
                                    @if (item.Storage != null)
                                    {
                                        <a asp-controller="Storages" asp-action="Details" asp-route-id="@item.Storage.Id">@item.Storage.Title</a>
                                    }
                                </td>
                                <td>
                                    <a class="btn btn-primary" asp-controller="Nomenclature" asp-action="Details" asp-route-id="@item.Nomenclature.Id">Details</a>
                                </td>
                            </tr>

                        }
                        else if (item.Part != null)
                        {
                            tableClass = (item.Part.OperatingTime > 0) ? (item.Part.OperatingTime < item.Part.WarningTime ? ((item.Part.OperatingTime == item.Part.WarningTime) ? "table-time-warning" : "") : "table-time-danger") : "";
                            <tr class="@tableClass">
                                
                                <td>
                                    @{
                                        if (item.Part.Status != null)
                                        {
                                            <span class="equip-current-status">
                                                @Html.DisplayFor(model => item.Part.Status.Title)
                                            </span>
                                        }
                                    }
                                </td>
                                <td> </td>
                                <td> </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Part.Title)
                                </td>
                                <td> </td>
                                <td>
                                    @{
                                        int timeLeft = item.Part.WarningTime - item.Part.OperatingTime;
                                        if (timeLeft > 0)
                                        {
                                            @(timeLeft / 60)<span>:</span>{
                                                string minutes;
                                                if (timeLeft % 60 < 10)
                                                {
                                                    minutes = "0" + (timeLeft % 60);
                                                }
                                                else
                                                {
                                                    minutes = (timeLeft % 60).ToString();
                                                }
                                                @minutes
                                            }
                                        }
                                        else
                                        {
                                            timeLeft *= -1;
                                            <span>Overwork by</span> @(timeLeft / 60)<span>:</span>{
                                                string minutes;
                                                if (timeLeft % 60 < 10)
                                                {
                                                    minutes = "0" + (timeLeft % 60);
                                                }
                                                else
                                                {
                                                    minutes = (timeLeft % 60).ToString();
                                                }
                                                @minutes
                                            }
                                            <p>No operating time left! Needs maintenance!</p>
                                        }
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Amount)
                                </td>
                                <td>
                                    @if (item.Storage != null)
                                    {
                                        <a asp-controller="Storages" asp-action="Details" asp-route-id="@item.Storage.Id">@item.Storage.Title</a>
                                    }
                                </td>
                                <td>
                                    <a class="btn btn-primary" asp-controller="Parts" asp-action="Details" asp-route-id="@item.Part.Id">Details</a>
                                </td>
                            </tr>
                        }
                        else if (item.Equipment != null)
                        {
                            tableClass = (item.Equipment.OperatingTime > 0) ? (item.Equipment.OperatingTime < item.Equipment.WarningTime ? ((item.Equipment.OperatingTime == item.Equipment.WarningTime) ? "table-time-warning" : "") : "table-time-danger") : "";

                            <tr class="@tableClass">
                                
                                <td>
                                    @{
                                        if (item.Equipment.Status != null)
                                        {
                                            <span class="equip-current-status">
                                                @Html.DisplayFor(model => item.Equipment.Status.Title)
                                            </span>
                                        }
                                    }
                                </td>
                                <td></td>
                                <td>
                                    @Html.DisplayFor(model => item.Equipment.SerialNum)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Equipment.Title)
                                </td>
                                <td></td>
                                <td>
                                    @{
                                        int timeLeft = item.Equipment.WarningTime - item.Equipment.OperatingTime;
                                        if (timeLeft > 0)
                                        {
                                            @(timeLeft / 60)<span>:</span>{
                                                string minutes;
                                                if (timeLeft % 60 < 10)
                                                {
                                                    minutes = "0" + (timeLeft % 60);
                                                }
                                                else
                                                {
                                                    minutes = (timeLeft % 60).ToString();
                                                }
                                                @minutes
                                            }
                                        }
                                        else
                                        {
                                            timeLeft *= -1;
                                            <span>Overwork by</span> @(timeLeft / 60)<span>:</span>{
                                                string minutes;
                                                if (timeLeft % 60 < 10)
                                                {
                                                    minutes = "0" + (timeLeft % 60);
                                                }
                                                else
                                                {
                                                    minutes = (timeLeft % 60).ToString();
                                                }
                                                @minutes
                                            }
                                            <p>No operating time left! Needs maintenance!</p>
                                        }
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Amount)
                                </td>
                                <td>
                                    @if (item.Storage != null)
                                    {
                                        <a asp-controller="Storages" asp-action="Details" asp-route-id="@item.Storage.Id">@item.Storage.Title</a>
                                    }
                                </td>
                                <td>
                                    <a class="btn btn-primary" asp-controller="Equipment" asp-action="Details" asp-route-id="@item.Equipment.Id">Details</a>

                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="container">
    @using (Html.BeginForm("Index", "Storages", FormMethod.Post))
    {
        <input type="hidden" id="JSONId" name="JSONId" value="" />
        <button class="btn btn-primary transfer-button" type="button" style="display:block;width:100%;">Transfer</button>
    }
</div>

@section Scripts{
    <script>
        var search = "";
        var searchField = "Title"; // default - "Title"
        var searchObjType = "All";

        var sortField = "Title"; // default - "Title"
        var sortAsc = true; // default
        var storageId = 0;

        var pagedList = "#paged-list";
        GenList(pagedList);

        $('#type-search-select').change(function () {
            searchObjType = $('#type-search-select').val();
        });

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/data")
            .configureLogging(signalR.LogLevel.Information)
            .build();


        function parseTitle(jsonObj) {
            var titleHTML;
            if (jsonObj.Nomenclature == null) {
                if (jsonObj.Part == null) {
                    if (jsonObj.Equipment == null) {
                        titleHTML = "";
                    }
                    else titleHTML = jsonObj.Equipment.Title;
                }
                else titleHTML = jsonObj.Part.Title;
            }
            else {
                titleHTML = jsonObj.Nomenclature.Title;
            }
            return titleHTML;
        }

        function parseStatus(jsonObj) {
            var statusHTML;
            if (jsonObj.Part == null) {
                if (jsonObj.Equipment == null) {
                    statusHTML = "";
                }
                else {
                    statusHTML = jsonObj.Equipment.Status.Title;
                }
            }
            else statusHTML = jsonObj.Part.Status.Title;
            return statusHTML;
        }

        function parseVendorCode(jsonObj) {
            var vendorCodeHTML;
            if (jsonObj.Nomenclature == null) {
                vendorCodeHTML = "";
            }
            else {
                if (jsonObj.Nomenclature.VendorCode == null) {
                    vendorCodeHTML = "";
                }
                else
                    vendorCodeHTML = jsonObj.Nomenclature.VendorCode;
            }
            return vendorCodeHTML;
        }

        function parseProvider(jsonObj) {
            var providerHTML;
            if (jsonObj.Nomenclature == null) {
                providerHTML = "";
            }
            else {
                if (jsonObj.Nomenclature.Provider == null) {
                    providerHTML = "";
                }
                else
                    providerHTML = jsonObj.Nomenclature.Provider.Title;
            }
            return providerHTML;
        }

        function parseProviderId(jsonObj) {
            var providerHTML;
            if (jsonObj.Nomenclature == null) {
                providerHTML = "";
            }
            else {
                if (jsonObj.Nomenclature.Provider == null) {
                    providerHTML = "";
                }
                else
                    providerHTML = jsonObj.Nomenclature.Provider.Id;
            }
            return providerHTML;
        }

        function parseOperatingTime(jsonObj) {
            var operatingTimeHTML;
            var warningTimeHTML;
            var result = "";
            if (jsonObj.Part == null) {
                if (jsonObj.Equipment == null) {
                    operatingTimeHTML = "";
                    warningTimeHTML = "";
                }
                else {
                    operatingTimeHTML = jsonObj.Equipment.OperatingTime;
                    warningTimeHTML = jsonObj.Equipment.WarningTime;
                }
            }
            else {
                operatingTimeHTML = jsonObj.Part.OperatingTime;
                warningTimeHTML = jsonObj.Part.WarningTime;
            }

            if (operatingTimeHTML != "" && warningTimeHTML != "") {
                var timeLeft = warningTimeHTML - operatingTimeHTML;
                if (timeLeft > 0) {
                    var minutes;
                    if (timeLeft % 60 < 10) {
                        minutes = "0" + (timeLeft % 60);
                    }
                    else {
                        minutes = (timeLeft % 60);
                    }
                    result = "<span>" + Math.round(timeLeft / 60) + ":" + minutes + "</span>";
                }
                else {
                    timeLeft *= -1;

                    var minutes;
                    if (timeLeft % 60 < 10) {
                        minutes = "0" + (timeLeft % 60);
                    }
                    else {
                        minutes = (timeLeft % 60);
                    }
                    result = "<span>Overwork by " + Math.round(timeLeft / 60) + ":" + minutes + "</span>" + "<p>No operating time left! Needs maintenance!</p>"
                }
            }


            return result;
        }

        function parseSerialNumber(jsonObj) {
            var serialNumberHTML;
            if (jsonObj.Equipment == null) {
                serialNumberHTML = " ";
            }
            else {
                serialNumberHTML = jsonObj.Equipment.SerialNum;
            }
            return serialNumberHTML;
        }

        function parseAmount(jsonObj) {
            var amountHTML;
            if (jsonObj.Amount == null) {
                if (jsonObj.Part == null) {
                    amountHTML = Number(1);
                }
                else amountHTML = Number(jsonObj.Part.Amount);
            }
            else amountHTML = Number(jsonObj.Amount);

            return amountHTML;
        }

        function parseButton(jsonObj) {
            var res = "";
            if (jsonObj.Nomenclature != null) {
                res = "<a class='btn btn-primary' href='/Nomenclature/Details/" + jsonObj.Nomenclature.Id + "'>Details</a>";
            }
            else if (jsonObj.Part != null) {
                res = "<a class='btn btn-primary' href='/Parts/Details/" + jsonObj.Part.Id + "'>Details</a>";
            } if (jsonObj.Equipment != null) {
                res = "<a class='btn btn-primary' href='/Equipment/Details/" + jsonObj.Equipment.Id + "'>Details</a>";
            }
            return res;
        }
        function parseCheckBox(jsonObj) {
            var res = "";
            if (jsonObj.Nomenclature != null) {
                res = "<label class='checkBox-container' for='nom-" + jsonObj.Nomenclature.Id + "'>" + "<input class='transferCheck' type='checkbox' id='nom-" + jsonObj.Nomenclature.Id + "' name='nom-" + jsonObj.Nomenclature.Id + "' value='nom-" + jsonObj.Nomenclature.Id + "'/><span class='checkmark'></span></label>";
            }
            else if (jsonObj.Part != null) {
                res = "<label class='checkBox-container' for='part-" + jsonObj.Part.Id + "'>" + "<input class='transferCheck' type='checkbox' id='part-" + jsonObj.Part.Id + "' name='part-" + jsonObj.Part.Id + "' value='part-" + jsonObj.Part.Id + "'/><span class='checkmark'></span></label>";
            } if (jsonObj.Equipment != null) {
                res = "<label class='checkBox-container' for='eq-" + jsonObj.Equipment.Id + "'>" + "<input class='transferCheck' type='checkbox' id='eq-" + jsonObj.Equipment.Id + "' name='eq-" + jsonObj.Equipment.Id + "' value='eq-" + jsonObj.Equipment.Id + "'/><span class='checkmark'></span></label>";
            }

            return res;
        }

        function parseStyle(jsonObj) {
            var rowStyle = "";
            if (jsonObj.Part != null) {
                if (jsonObj.Part.OperatingTime > 0) {
                    if (jsonObj.Part.OperatingTime < jsonObj.Part.WarningTime) {
                        if (jsonObj.Part.OperatingTime === jsonObj.Part.WarningTime) {
                            rowStyle = "table-time-warning"
                        }
                    }
                    else rowStyle = "table-time-danger"
                }
            }
            else if (jsonObj.Equipment != null) {
                if (jsonObj.Equipment.OperatingTime > 0) {
                    if (jsonObj.Equipment.OperatingTime < jsonObj.Equipment.WarningTime) {
                        if (jsonObj.Equipment.OperatingTime === jsonObj.Equipment.WarningTime) {
                            rowStyle = "table-time-warning"
                        }
                    }
                    else rowStyle = "table-time-danger"
                }
            }
            return rowStyle;
        }

        hubConnection.on("Receive", function (data) {
            $(pagedList + " tbody").empty();
            var json = JSON.parse(data);
            for (let i = 0; i < json.length; i++) {
                console.log(json[i]);
                var title = parseTitle(json[i]);
                var status = parseStatus(json[i]);
                var vendorcode = parseVendorCode(json[i]);
                var provider = parseProvider(json[i]);
                var providerId = parseProviderId(json[i]);

                var opertime = parseOperatingTime(json[i]);
                var serialnum = parseSerialNumber(json[i]);
                var amount = parseAmount(json[i]);
                var trclass = parseStyle(json[i]);
                var btnDetails = parseButton(json[i]);
                var checkBox = parseCheckBox(json[i]);
                console.log(opertime);

                $(pagedList + " tbody").append(
                    "<tr class='" + trclass + "'>" +
                    "<td>" + checkBox + "</td>" +
                    "<td>" + "<span class='equip-current-status'>" + status + "</span>" + "</td>" +
                    "<td>" + vendorcode + "</td>" +
                    "<td>" + serialnum + "</td>" +
                    "<td>" + title + "</td>" +
                    "<td>" + "<a href='/Providers/Details/" + providerId + "'>" + provider + "</a></td>" +
                    "<td>" + opertime + "</td>" +
                    "<td>" + amount + "</td>" +
                    "<td>" + "<a href='/Storages/Details/" + json[i].Storage.Id + "'>" + json[i].Storage.Title + "</a></td>" +
                    "<td>" + btnDetails + "</td>" +
                    "</tr>"
                );
            }
            GenList(pagedList);
        });

        hubConnection.on("ReceiveSelectedStock", function (data) {
            $("#selected-nomenclature-table" + " tbody").empty();
            var json = JSON.parse(data);
            for (let i = 0; i < json.length; i++) {
                console.log(json[i]);
                var title = parseTitle(json[i]);
                var status = parseStatus(json[i]);
                var vendorcode = parseVendorCode(json[i]);
                var provider = parseProvider(json[i]);
                var providerId = parseProviderId(json[i]);

                var opertime = parseOperatingTime(json[i]);
                var serialnum = parseSerialNumber(json[i]);
                var amount = parseAmount(json[i]);
                var trclass = parseStyle(json[i]);
                var btnDetails = parseButton(json[i]);
                var checkBox = parseCheckBox(json[i]);
                console.log(opertime);

                $(pagedList + " tbody").append(
                    "<tr class='" + trclass + "'>" +
                    
                    "<td>" + "<span class='equip-current-status'>" + status + "</span>" + "</td>" +
                    "<td>" + vendorcode + "</td>" +
                    "<td>" + serialnum + "</td>" +
                    "<td>" + title + "</td>" +
                    "<td>" + "<a href='/Providers/Details/" + providerId + "'>" + provider + "</a></td>" +
                    "<td>" + opertime + "</td>" +
                    "<td>" + amount + "</td>" +
                    "<td>" + "<a href='/Storages/Details/" + json[i].Storage.Id + "'>" + json[i].Storage.Title + "</a></td>" +
                    "<td>" + btnDetails + "</td>" +
                    "</tr>"
                );
            }
            
        });

        $(function () {
            $('#storagesTreeViewExport').on("select_node.jstree", function (e, data) {
                console.log("select");
                search = $("#searchString").val();
                storageId = Number(data.selected);
                hubConnection.invoke("SendStocks", search, storageId, searchField, searchObjType);
            });
        });

        //||||||||||||||||||||||||||||||||||||||||||||
        var storagesJSON = JSON.parse('@Html.Raw(OperationMonitoring.Helpers.JSConverter.SerializeObject(treeViewStorages))');

        $('#storagesTreeViewExport').jstree({
        "plugins": ["wholerow", "contextmenu", "search"],
        "core": {
            "multiple": false,
            "themes": {
                "dots": false,
                "icons": false,
                "responsive":false
            },
            "data": storagesJSON
        },
        "contextmenu": {
            "items": function ($node) {
                var tree = $("#storagesTreeViewExport").jstree(true);
                return {
                    "Details": {
                        "separator_before": false,
                        "separator_after": false,
                        "label": "Details",
                        "action": function (obj) {
                            window.location.href = $node.a_attr.href;
                        }
                    }
                };
            }
        }
    });

        $(".check").click(function () {
            if ($(this).checked) {
                stockId = Number(this.value);
                hubConnection.invoke("AddSelectedStock", stockId);
            } else {
                stockId = Number(this.value);
                hubConnection.invoke("RemoveSelectedStock", stockId);
            }
        });

        $(".transfer-button").click(function () {
        //var checkboxes = $('input[type=checkbox]:checked');
        //let stocksIds = [];
        //for (var i = 0; i < checkboxes.length; i++) {
        //    stocksIds.push(checkboxes[i].value)
        //}
        //var strJSON = JSON.stringify(stocksIds);
        //$(this).prev().val(strJSON)
        //$(this).parent().submit();
        });



        hubConnection.start();
    </script>
}
